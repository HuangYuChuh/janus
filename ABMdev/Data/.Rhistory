select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
filter(crop %in% crops)
View(id_yeilds)
View(list_raw_id_ops)
View(id_ops_raw_data)
id_barley <- id_ops_raw_data %>%
filter(commodity_desc=="BARLEY")
View(id_barley)
library(httr)
library(jsonlite)
library(tidycensus)
library(tidyverse)
library(purrr)
library(mapview)
library(dplyr)
# If you've never used your tidycensus API key in your R session, run this:
census_api_key("6fd2754dd1bdcc811b51c669667df2873b3bd56e")
nass_key <- "B5240598-2A7D-38EE-BF8D-816A27BEF504" #QuickStats
# NASS url
nass_url <- "http://quickstats.nass.usda.gov"
# commodity description of interest
my_commodity_desc<- "FARM OPERATIONS" #[AG LAND, INCL BUILDINGS - OPERATIONS WITH ASSET VALUE, MEASURED IN $ / ACRE; $ / OPERATION; $/ACRE; $]; [AG LAND, CROPLAND, PASTURED ONLY - ACRES] [Income, Net or Farm-related?]
# query start year
my_year <- "2000"
# state of interest
my_state <- "ID"
# final path string
path_id_farms <- paste0("api/api_GET/?key=", nass_key, "&commodity_desc=", my_commodity_desc, "&year__GE=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_farms <- GET(url = nass_url, path = path_id_farms)
char_raw_id_farms<- rawToChar(raw_id_farms$content)
# check size of object
nchar(char_raw_id_farms)
#turn into list
list_raw_id_farms<- fromJSON(char_raw_id_farms)
# apply rbind to each row of the list and convert to a data frame
id_farms_raw_data <- pmap_dfr(list_raw_id_farms, rbind)
colnames(id_farms_raw_data)[colnames(id_farms_raw_data)=="CV (%)"] <- "CV"
regions <- c("EAST", "SOUTHWEST", "SOUTH CENTRAL")
id_county_agg <- id_farms_raw_data %>%
filter(agg_level_desc == "COUNTY") %>%
filter(asd_desc %in% regions) %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
mutate(CV_trim = str_trim(CV)) %>%
# select only the columns we'll need
select(state_alpha, state_ansi,county_code, county_name, asd_desc,
agg_level_desc, year, class_desc, domain_desc, domaincat_desc, value_char =value_trim, unit_desc, CV_char = CV_trim) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
mutate(CV = suppressWarnings(as.numeric(CV_char))) %>%
# remove unnecessary columns
select(-value_char) %>%
select(-CV_char) %>%
# make a column with the county name and year (we'll need this for plotting)
mutate(county_year = paste0(str_to_lower(county_name), "_", year)) %>%
# make GEOID column to match up with county level spatial data (we'll need this for mapping)
mutate(GEOID = paste0(state_ansi, county_code)) %>%
#split up class description
separate(class_desc, c("class", "desc", "cat"), ',')
View(raw_id_farms)
id_county_agg <- id_farms_raw_data %>%
filter(agg_level_desc == "COUNTY")
View(id_county_agg)
id_county_agg <- id_farms_raw_data %>%
filter(agg_level_desc == "COUNTY") %>%
filter(unit_desc == "OPERATIONS")
unique(id_county_agg$domaincat_desc)
View(id_county_agg)
library(httr)
library(jsonlite)
library(tidycensus)
library(tidyverse)
library(purrr)
library(mapview)
library(dplyr)
# If you've never used your tidycensus API key in your R session, run this:
census_api_key("6fd2754dd1bdcc811b51c669667df2873b3bd56e")
nass_key <- "B5240598-2A7D-38EE-BF8D-816A27BEF504" #QuickStats
# NASS url
nass_url <- "http://quickstats.nass.usda.gov"
# commodity description of interest
#my_commodity_desc<- "OPERATORS" #FARM OPERATIONS, [AG LAND, INCL BUILDINGS - OPERATIONS WITH ASSET VALUE, MEASURED IN $ / ACRE; $ / OPERATION; $/ACRE; $]; [AG LAND, CROPLAND, PASTURED ONLY - ACRES] [Income, Net or Farm-related?]
my_group_desc <-"CROPS"
# query start year
my_year <- "2013"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year__GE=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
###--------------------------------------#
# Subset Data based on highest value crops
#####
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YEILD")
crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
filter(crop %in% crops)
View(list_raw_id_ops)
my_year <- "2017"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year__GE=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
filter(crop %in% crops)
View(id_sales)
my_year <- "2018"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year__GE=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")
View(id_sales)
# query start year
my_year <- "2018"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
#filter(crop %in% crops)
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")
View(id_sales)
View(id_ops_raw_data)
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc, commodity_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")
View(id_sales)
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE")
View(id_sales)
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
filter(reference_period_desc == 'YEAR')
my_year <- "2010"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
###--------------------------------------#
# Subset Data based on highest value crops
#####
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
filter(reference_period_desc == 'YEAR')
View(id_sales)
unique(id_sales$commodity_desc)
unique(id_ops_raw_data$commodity_desc)
tst<-unique(id_ops_raw_data$commodity_desc)
tst2<-unique(id_sales$commodity_desc)
load("~/Documents/GitRepos/ReservoirModeling/ResModOutput.RData")
load("~/Documents/GitRepos/ReservoirModeling/ResModOutput.RData")
params<-bothLHS$data
View(params)
View(both)
plot(both$Q[[3]][,93])
colRamp<<-pal(4)
plot(both$Q[[3]][,93], type='l', col=colRamp[1])
lines(both$Q[[3]][,203], col=colRamp[2])
lines(both$Q[[3]][,34], col=colRamp[3])
lines(both$Q[[3]][,386], col=colRamp[4])
plot(both$Q[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$Q[[3]][,203], col=colRamp[2])
lines(both$Q[[3]][,34], col=colRamp[3])
lines(both$Q[[3]][,386], col=colRamp[4])
colRamp<<-pal(5)
plot(both$Q[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$Q[[3]][,125], col=colRamp[2])
lines(both$Q[[3]][,203], col=colRamp[3])
lines(both$Q[[3]][,34], col=colRamp[4])
lines(both$Q[[3]][,386], col=colRamp[5])
par(mfrow=c(1,2))
plot(both$stor[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$stor[[3]][,125], col=colRamp[2])
lines(both$stor[[3]][,203], col=colRamp[3])
lines(both$stor[[3]][,34], col=colRamp[4])
lines(both$stor[[3]][,386], col=colRamp[5])
plot(both$Q[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$Q[[3]][,125], col=colRamp[2])
lines(both$Q[[3]][,203], col=colRamp[3])
lines(both$Q[[3]][,34], col=colRamp[4])
lines(both$Q[[3]][,386], col=colRamp[5])
colRamp<<-pal(5)
par(mfrow=c(2,1))
plot(both$stor[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$stor[[3]][,125], col=colRamp[2])
lines(both$stor[[3]][,203], col=colRamp[3])
lines(both$stor[[3]][,34], col=colRamp[4])
lines(both$stor[[3]][,386], col=colRamp[5])
plot(both$Q[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$Q[[3]][,125], col=colRamp[2])
lines(both$Q[[3]][,203], col=colRamp[3])
lines(both$Q[[3]][,34], col=colRamp[4])
lines(both$Q[[3]][,386], col=colRamp[5])
par(mfrow=c(2,1))
plot(both$stor[[3]][,93], type='l', col=colRamp[1])
lines(both$stor[[3]][,125], col=colRamp[2])
lines(both$stor[[3]][,203], col=colRamp[3])
lines(both$stor[[3]][,34], col=colRamp[4])
lines(both$stor[[3]][,386], col=colRamp[5])
plot(both$Q[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$Q[[3]][,125], col=colRamp[2])
lines(both$Q[[3]][,203], col=colRamp[3])
lines(both$Q[[3]][,34], col=colRamp[4])
lines(both$Q[[3]][,386], col=colRamp[5])
max(both$stor[[3]][,34])
min(both$stor[[3]][,34])
colRamp<<-pal(5)
par(mfrow=c(2,1))
plot(both$stor[[3]][,93], type='l', col=colRamp[1], ylim = c(546000,1032000))
lines(both$stor[[3]][,125], col=colRamp[2])
lines(both$stor[[3]][,203], col=colRamp[3])
lines(both$stor[[3]][,34], col=colRamp[4])
lines(both$stor[[3]][,386], col=colRamp[5])
plot(both$Q[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$Q[[3]][,125], col=colRamp[2])
lines(both$Q[[3]][,203], col=colRamp[3])
lines(both$Q[[3]][,34], col=colRamp[4])
lines(both$Q[[3]][,386], col=colRamp[5])
plot(both$stor[[3]][,93], type='l', col=colRamp[1], ylim = c(546000,1032000))
lines(both$stor[[3]][,125], col=colRamp[2])
lines(both$stor[[3]][,203], col=colRamp[3])
plot(both$Q[[3]][,93], type='l', col=colRamp[1], ylim=c(0,10000))
lines(both$Q[[3]][,125], col=colRamp[2])
lines(both$Q[[3]][,203], col=colRamp[3])
library(httr)
library(jsonlite)
library(tidycensus)
library(tidyverse)
library(purrr)
library(mapview)
library(dplyr)
# If you've never used your tidycensus API key in your R session, run this:
census_api_key("6fd2754dd1bdcc811b51c669667df2873b3bd56e")
nass_key <- "B5240598-2A7D-38EE-BF8D-816A27BEF504" #QuickStats
# NASS url
nass_url <- "http://quickstats.nass.usda.gov"
# commodity description of interest
#my_commodity_desc<- "OPERATORS" #FARM OPERATIONS, [AG LAND, INCL BUILDINGS - OPERATIONS WITH ASSET VALUE, MEASURED IN $ / ACRE; $ / OPERATION; $/ACRE; $]; [AG LAND, CROPLAND, PASTURED ONLY - ACRES] [Income, Net or Farm-related?]
my_group_desc <-"CROPS"
# query start year
my_year <- "2005"
# state of interest
my_state <- "ID"
###--------------------------------------#
# Download data and turn into dataframe
#####
# final path string
path_id_ops <- paste0("api/api_GET/?key=", nass_key, "&sector_desc=", my_group_desc, "&year=", my_year, "&state_alpha=", my_state)
#unpack JSON object
raw_id_ops <- GET(url = nass_url, path = path_id_ops)
char_raw_id_ops<- rawToChar(raw_id_ops$content)
# check size of object
nchar(char_raw_id_ops)
#turn into list
list_raw_id_ops<- fromJSON(char_raw_id_ops)
# apply rbind to each row of the list and convert to a data frame
id_ops_raw_data <- pmap_dfr(list_raw_id_ops, rbind)
###--------------------------------------#
# Subset Data based on highest value crops
#####
categories<-c("AREA HARVESTED", "PRICE RECEIVED", "YIELD")
#crops<-c("HOPS ", "PEACHES ", "PLUMS & PRUNES ", "PLUMS & PRUNES, ORGANIC ","PLUMS, ORGANIC ", "PEARS, ORGANIC ","PEACHES, ORGANIC ","GRAPES, ORGANIC ", "CHERRIES, SWEET ","MINT, PEPPERMINT, OIL ", "MINT, SPEARMINT, OIL " )
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
filter(reference_period_desc == 'YEAR') %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc, commodity_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")  %>%
#filter(crop %in% crops)
id_sales <- id_ops_raw_data %>%
#filter to specific data
#filter(statisticcat_desc=="SALES") %>%
#filter(unit_desc=="$") %>%
filter(statisticcat_desc %in% categories)%>%
filter(agg_level_desc=="STATE") %>%
filter(reference_period_desc == 'YEAR') %>%
# trim white space from ends (note: 'Value' is a character here, not a number)
mutate(value_trim = str_trim(Value)) %>%
# select only the columns we'll need
select(asd_desc,
agg_level_desc, year, short_desc, class_desc, domain_desc, value_char =value_trim, unit_desc, commodity_desc) %>%
# filter out entries with codes '(D)' and '(Z)'
filter(value_char != "(D)" & value_char != "(Z)") %>%
# remove commas from number values and convert to R numeric class
mutate(value = as.numeric(str_remove(value_char, ","))) %>%
# remove unnecessary columns
select(-value_char)%>%
separate(short_desc, c("crop", 'info'), "- ")
#filter(crop %in% crops)
View(id_sales)
getwd()
setwd("~/Documents/GitRepos/IM3-BoiseState/ABMdev/Data")
write.csv(id_sales, file='IdahoSales_2005.csv')
